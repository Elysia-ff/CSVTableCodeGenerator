// <auto-generated>
//  automatically generated by CSVTableCodeGenerator, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEngine;

namespace Elysia.Tables
{
    public class SampleDictionaryTable
    {
        public class Row
        {
            public string ID { get; private set; }
            public int PrimitiveValue { get; private set; }
            public Color32 Color { get; private set; }
            public Vector3 Vector { get; private set; }
            public IReadOnlyList<float> Arrays { get; private set; }
            public Elysia.Tables.Sample.EnumValues EnumValue { get; private set; }

            public Row(string[] source)
            {
                ID = source[1];
                PrimitiveValue = string.IsNullOrEmpty(source[2]) ? default(int) : int.Parse(source[2]);
                Color = string.IsNullOrEmpty(source[3]) ? default(Color32) : new Func<string, Color32>((s) => { string[] values = Regex.Replace(s, "\\s+", "").Split(','); return new Color32(byte.Parse(values[0]), byte.Parse(values[1]), byte.Parse(values[2]), byte.Parse(values[3])); }).Invoke(source[3]);
                Vector = string.IsNullOrEmpty(source[4]) ? default(Vector3) : new Func<string, Vector3>((s) => { string[] values = Regex.Replace(s, "\\s+", "").Split(','); return new Vector3(float.Parse(values[0]), float.Parse(values[1]), float.Parse(values[2])); }).Invoke(source[4]);
                Arrays = string.IsNullOrEmpty(source[5]) ? default(IReadOnlyList<float>) : Regex.Split(source[5], "(?<=\\])(?=\\[)").Select((s) => float.Parse(s.Substring(1, s.Length - 2))).ToArray();
                EnumValue = string.IsNullOrEmpty(source[6]) ? default(Elysia.Tables.Sample.EnumValues) : (Elysia.Tables.Sample.EnumValues)Enum.Parse(typeof(Elysia.Tables.Sample.EnumValues), source[6], false);
            }
        }

        private Dictionary<string, Row> rows = new Dictionary<string, Row>();

        public IReadOnlyDictionary<string, Row> Rows => rows;

        public int Count => rows.Count;

        public void Load()
        {
            Regex regex = new Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))");
            TextAsset textAsset = Resources.Load<TextAsset>("Tables/sample dictionary table");

            using StringReader stringReader = new StringReader(textAsset.text);
            stringReader.ReadLine();
            stringReader.ReadLine();

            while (true)
            {
                string line = stringReader.ReadLine();
                if (line == null)
                {
                    break;
                }

                string[] columns = regex.Split(line);
                for (int i = 0; i < columns.Length; i++)
                {
                    columns[i] = columns[i].Replace("\"", "");
                }

                rows.Add(columns[1], new Row(columns));
            }

            Resources.UnloadAsset(textAsset);
        }

        public Row this[string key] => rows[key];
        public bool ContainsKey(string key) => rows.ContainsKey(key);
        public bool TryGetValue(string key, out Row row) => rows.TryGetValue(key, out row);
    }
}
