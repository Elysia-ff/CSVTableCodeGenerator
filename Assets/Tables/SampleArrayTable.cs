// <auto-generated>
//  automatically generated by CSVTableCodeGenerator, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEngine;

namespace Elysia.Tables
{
    public class SampleArrayTable
    {
        public class Row
        {
            public int PrimitiveValue { get; private set; }
            public Color32 Color { get; private set; }
            public Vector3 Vector { get; private set; }
            public IReadOnlyList<float> Arrays { get; private set; }
            public Elysia.Tables.Sample.EnumValues EnumValue { get; private set; }

            public Row(string[] source)
            {
                PrimitiveValue = string.IsNullOrEmpty(source[0]) ? default(int) : int.Parse(source[0]);
                Color = string.IsNullOrEmpty(source[1]) ? default(Color32) : new Func<string, Color32>((s) => { string[] values = Regex.Replace(s, "\\s+", "").Split(','); return new Color32(byte.Parse(values[0]), byte.Parse(values[1]), byte.Parse(values[2]), byte.Parse(values[3])); }).Invoke(source[1]);
                Vector = string.IsNullOrEmpty(source[2]) ? default(Vector3) : new Func<string, Vector3>((s) => { string[] values = Regex.Replace(s, "\\s+", "").Split(','); return new Vector3(float.Parse(values[0]), float.Parse(values[1]), float.Parse(values[2])); }).Invoke(source[2]);
                Arrays = string.IsNullOrEmpty(source[3]) ? default(IReadOnlyList<float>) : Regex.Split(source[3], "(?<=\\])(?=\\[)").Select((s) => float.Parse(s.Substring(1, s.Length - 2))).ToArray();
                EnumValue = string.IsNullOrEmpty(source[4]) ? default(Elysia.Tables.Sample.EnumValues) : (Elysia.Tables.Sample.EnumValues)Enum.Parse(typeof(Elysia.Tables.Sample.EnumValues), source[4], false);
            }
        }

        private List<Row> rows = new List<Row>();

        public IReadOnlyList<Row> Rows => rows;

        public int Count => rows.Count;

        public void Load()
        {
            Regex regex = new Regex(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))");
            TextAsset textAsset = Resources.Load<TextAsset>("Tables/sample array table");

            using StringReader stringReader = new StringReader(textAsset.text);
            stringReader.ReadLine();
            stringReader.ReadLine();

            while (true)
            {
                string line = stringReader.ReadLine();
                if (line == null)
                {
                    break;
                }

                string[] columns = regex.Split(line);
                for (int i = 0; i < columns.Length; i++)
                {
                    columns[i] = columns[i].Replace("\"", "");
                }

                rows.Add(new Row(columns));
            }

            Resources.UnloadAsset(textAsset);
        }

        public Row this[int key] => rows[key];
        public Row FindPrimitiveValue(int key)
        {
            return rows.Find((row) => row.PrimitiveValue == key);
        }
        public List<Row> FindPrimitiveValueAll(int key)
        {
            return rows.FindAll((row) => row.PrimitiveValue == key);
        }
        public Row FindColor(Color32 key)
        {
            return rows.Find((row) => row.Color.r == key.r && row.Color.g == key.g && row.Color.b == key.b && row.Color.a == key.a);
        }
        public List<Row> FindColorAll(Color32 key)
        {
            return rows.FindAll((row) => row.Color.r == key.r && row.Color.g == key.g && row.Color.b == key.b && row.Color.a == key.a);
        }
        public Row FindVector(Vector3 key)
        {
            return rows.Find((row) => row.Vector == key);
        }
        public List<Row> FindVectorAll(Vector3 key)
        {
            return rows.FindAll((row) => row.Vector == key);
        }
        public Row FindArrays(IReadOnlyList<float> key)
        {
            return rows.Find((row) => row.Arrays == key);
        }
        public List<Row> FindArraysAll(IReadOnlyList<float> key)
        {
            return rows.FindAll((row) => row.Arrays == key);
        }
        public Row FindEnumValue(Elysia.Tables.Sample.EnumValues key)
        {
            return rows.Find((row) => row.EnumValue == key);
        }
        public List<Row> FindEnumValueAll(Elysia.Tables.Sample.EnumValues key)
        {
            return rows.FindAll((row) => row.EnumValue == key);
        }
    }
}
